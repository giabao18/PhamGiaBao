1. 
--- Old code ---

	const getPriority = (blockchain: any): number => {
	  switch (blockchain) {
	    case 'Osmosis':
	      return 100
	    case 'Ethereum':
	      return 50
	    case 'Arbitrum':
	      return 30
	    case 'Zilliqa':
	      return 20
	    case 'Neo':
	      return 20
	    default:
	      return -99
	  }
	}


--- Issue: Hardcoded blockchain ---
    - Anti-pattern: Hardcoding blockchain priorities inside a function can make it harder to maintain and update. Consider storing these priorities in a configuration or data structure that's easier to manage.

--- Improvement  ---
    - Move it outside of a function

--- Code Improvement ---

const blockchainPriorities: Record<string, number> = {
  'Osmosis': 100,
  'Ethereum': 50,
  'Arbitrum': 30,
  'Zilliqa': 20,
  'Neo': 20,
};

2/
--- Old code ---
const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
		  const balancePriority = getPriority(balance.blockchain);
		  if (lhsPriority > -99) {
		     if (balance.amount <= 0) {
		       return true;
		     }
		  }
		  return false
		}).sort((lhs: WalletBalance, rhs: WalletBalance) => {
			const leftPriority = getPriority(lhs.blockchain);
		  const rightPriority = getPriority(rhs.blockchain);
		  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) {
		    return 1;
		  }
    });
  }, [balances, prices]);


--- Issues: Ineffective Sorting 

    - The sorting function provided to 'sort()' does not handle all cases (e.g., when 'leftPriority' equals 'rightPriority'). This can lead to unpredictable sorting results.
    - Inefficiency: Re-render by 'prices' which is not use in function can degrade performance 

--- Improvement ---
    - Optimize Sorting Logic: Ensure the sorting function in sort() handles all cases to maintain consistency and predictability in sorting results.
    - Remove unnecessary dependency: `prices`

--- Code Improvement ---

const sortedBalances = useMemo(() => {
    const filteredBalances = balances.filter((balance) => {
      const priority = blockchainPriorities[balance.blockchain] ?? -99;
      return priority > -99 && balance.amount <= 0;
    });

    const sorted = filteredBalances.sort((lhs, rhs) => {
      const leftPriority = blockchainPriorities[lhs.blockchain] ?? -99;
      const rightPriority = blockchainPriorities[rhs.blockchain] ?? -99;
      return rightPriority - leftPriority; // Sort in descending order of priority
    });

    return sorted;
}, [balances]);

3/
--- Old code ---
  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed()
    }
  })

  const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount;
    return (
      <WalletRow 
        className={classes.row}
        key={index}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={balance.formatted}
      />
    )
  })

--- Issues ---
    - formattedBalances and rows can be re-render unnecessary when components re-render 
    - Using index as key for React components 'WalletRow' can lead to issues with component identity and reconciliation, especially when the order of sorted balance change 

--- Improvement ---
    - Combine formattedBalances with rows and useMemo to memorize the React component with dependencies to prevent unnecessary re-render
    - Use stable key for list (ex: using balance.currency)
    - Remove interface which is not used

--- Code Improvement ---

const rows = useMemo(() => {
    return sortedBalances.map((balance, index) => {
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        <WalletRow
          key={balance.currency} // Use a unique key
          className="row"
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.amount.toFixed()} // Format amount where needed
        />
      );
    });
}, [sortedBalances, prices]);


------ Full Code Improvement ------

interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string;
}

const blockchainPriorities: Record<string, number> = {
  'Osmosis': 100,
  'Ethereum': 50,
  'Arbitrum': 30,
  'Zilliqa': 20,
  'Neo': 20,
};

export const WalletPage: React.FC<BoxProps> = (props) => {
  const { children, ...rest } = props;

  const balances = useWalletBalances(); 
  const prices = usePrices();

  const sortedBalances = useMemo(() => {
    const filteredBalances = balances.filter((balance) => {
      const priority = blockchainPriorities[balance.blockchain] ?? -99;
      return priority > -99 && balance.amount <= 0;
    });

    const sorted = filteredBalances.sort((lhs, rhs) => {
      const leftPriority = blockchainPriorities[lhs.blockchain] ?? -99;
      const rightPriority = blockchainPriorities[rhs.blockchain] ?? -99;
      return rightPriority - leftPriority; 
    });

    return sorted;
    }, [balances]);

  const rows = useMemo(() => {
    return sortedBalances.map((balance, index) => {
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        <WalletRow
          key={balance.currency} 
          className="row"
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.amount.toFixed()} 
        />
      );
    });
    }, [sortedBalances, prices]);

  return (
    <div {...rest}>
      {rows}
    </div>
  );
};

